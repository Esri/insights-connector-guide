id: esri.base

# mandatory configuration if super class is not defined
identifier setting:
  escape character: '"'
  open enquote: '"'
  close enquote: '"'
  maximum identifier length: 64

# mandatory configuration if super class is not defined
sql clauses:
  select constant: SELECT ${columns}
  limit: SELECT * FROM (${source}) t LIMIT ${limit}
  pagination: SELECT * FROM (${source}) t ORDER BY ${orderby} LIMIT ${limit} OFFSET ${offset}

# Default value for each capability is false
sql capabilities:
  window functions: true
  window function in where clause: false
  pagination without order by: true
  common table expression: true
  named parameters in common table expression: true

window functions:
  - name: row number
    sql: ROW_NUMBER() OVER(ORDER BY $0)

  - name: partitioned row number
    sql: ROW_NUMBER() OVER(PARTITION BY $0 ORDER BY $1)

  - name: average over
    sql: AVG($0) OVER(PARTITION BY $1)

  - name: sliding average
    sql: AVG($0) OVER(ORDER BY $1 ROWS BETWEEN $2 PRECEDING AND $3 following)

  - name: partitioned sliding average
    sql: AVG($0) OVER(PARTITION BY $1 ORDER BY $2 ROWS BETWEEN $3 PRECEDING AND $4 following)

  - name: sum over
    sql: SUM($0) OVER(PARTITION BY $1)

  - name: lag over
    sql: LAG($0) OVER(ORDER BY $1)

sql functions:
  # aggregate functions group
  - name: count
    sql: COUNT($0)

  - name: count distinct
    sql: COUNT(DISTINCT $0)

  - name: sum
    sql: SUM($0)

  - name: avg
    sql: AVG($0)

  - name: max
    sql: MAX($0)

  - name: min
    sql: MIN($0)

  - name: stddev
    sql: STDDEV($0)

  - name: variance
    sql: VARIANCE($0)

  - name: median
    sql: MEDIAN($0)

  - name: mode
    sql: MODE($0)

  - name: percentile
    sql: PERCENTILE_CONT($0) WITHIN GROUP (ORDER BY $1)

  # string functions group
  - name: trim
    sql: TRIM(BOTH $0 FROM $1)

  - name: left trim
    sql: TRIM(LEADING $0 FROM $1)

  - name: right trim
    sql: TRIM(TRAILING $0 FROM $1)

  - name: lower
    sql: LOWER($0)

  - name: upper
    sql: UPPER($0)

  - name: string concatenation
    sql: CONCAT($0, $1)

  - name: string position
    sql: POSITION($0, $1, $2)

  - name: string length
    sql: LENGTH($0)

  - name: string substitute
    sql: REPLACE($0, $1, $2)

  - name: substring
    sql: SUBSTRING($0, $1, $2)

  - name: left
    sql: LEFT($0, $1)

  - name: right
    sql: RIGHT($0, $1)

  - name: like
    sql: $0 LIKE $1

  # date time functions group
  - name: extract year
    sql: DATEPART(year, $0)

  - name: extract quarter
    sql: DATEPART(quarter, $0)

  - name: extract month
    sql: DATEPART(month, $0)

  - name: extract day of month
    sql: DATEPART(day, $0)

  - name: extract day of week
    sql: DATEPART(weekday, $0)

  - name: extract hour
    sql: DATEPART(hour, $0)

  - name: extract minute
    sql: DATEPART(minute, $0)

  - name: extract second
    sql: DATEPART(second, $0)

  - name: datedif year
    sql: DATEDIFF(year, $0, $1)

  - name: datedif month
    sql: DATEDIFF(month, $0, $1)

  - name: datedif day
    sql: DATEDIFF(day, $0, $1)

  - name: datedif hour
    sql: DATEDIFF(hour, $0, $1)

  - name: datedif minute
    sql: DATEDIFF(minute, $0, $1)

  - name: datedif second
    sql: DATEDIFF(second, $0, $1)

  - name: create timestamp from milliseconds
    sql: to_timestamp($0/1000.0)

  - name: create timestamp from components
    sql: >
      CASE WHEN $1 > 12 OR $1 < 1 OR $2 > 31 OR $2 < 1 OR
        $3 > 24 OR $3 < 1 OR $4 > 60 OR $4 < 0 OR $5 > 60 OR $5 < 0 THEN NULL ELSE
        TO_TIMESTAMP($0 || '-' || $1 || '-' || $2 || ' ' || $3 || ':' || $4 || ':' || $5,
              CASE WHEN length($0) > 2 THEN 'YYYY-MM-DD hh24:mi:ss' ELSE 'YY-MM-DD hh24:mi:ss' END)
      END

  - name: create timestamp from text
    sql: TO_TIMESTAMP($0, '$1')

  - name: create time from milliseconds
    sql: TO_TIME($0/1000.0)

  - name: create time from components
    sql: >
      CASE WHEN $0 > 24 OR $0 < 0 OR $1 > 60 OR $1 < 0 OR $2 > 60 OR $2 < 0 THEN NULL ELSE
      TO_TIME( $0 || ':' || $1 || ':' || $2, 'hh24:mi:ss') END

  - name: create date from milliseconds
    sql: TO_DATE($0/1000.0)

  - name: create date from components
    sql: >
      CASE WHEN $1 > 12 OR $1 < 1 OR $2 > 31 OR $2 < 1 THEN NULL ELSE
      TO_DATE($0 || '-' || $1 || '-' ||$2,
              CASE WHEN length($0) > 2 THEN 'YYYY-MM-DD' ELSE 'YY-MM-DD' END) END

  - name: current timestamp
    sql: CURRENT_TIMESTAMP

  - name: current time
    sql: CURRENT_DATE

  - name: current date
    sql: CURRENT_DATE

  - name: now
    sql: NOW()

  # conditional functions group

  - name: case when else
    sql: CASE WHEN $0 THEN $1 ELSE $2 END

  - name: case when
    sql: CASE WHEN $0 THEN $1 END

  - name: is null
    sql: $0 IS NULL

  - name: is not null
    sql: $0 IS NOT NULL

  - name: nullif
    sql: nullif($0, $1)

  - name: coalesce
    sql: COALESCE($0, $1)

  # logical operators
  - name: and
    sql: $0 AND $1

  - name: or
    sql: $0 OR $1

  - name: between
    sql: $0 BETWEEN $1 AND $2

  - name: not
    sql: NOT($0)

  # arithmetic functions group
  - name: abs
    sql: ABS($0)

  - name: acos
    sql: ACOS($0)

  - name: asin
    sql: ASIN($0)

  - name: atan
    sql: ATAN($0)

  - name: sin
    sql: SIN($0)

  - name: sinh
    sql: SINH($0)

  - name: cos
    sql: COS($0)

  - name: cosh
    sql: COSH($0)

  - name: tan
    sql: TAN($0)

  - name: tanh
    sql: TANH($0)

  - name: ln
    sql: LN(NULLIF(CASE WHEN $0 <= 0 THEN NULL ELSE $0 END ,0))

  - name: log
    sql: LOG(nullif(CASE WHEN $1 <= 0 THEN NULL ELSE $1 END, 0), CASE WHEN $0 <= 1 THEN NULL ELSE $0 END)

  - name: log10
    sql: LOG10(CASE WHEN $0 <= 0 THEN NULL ELSE $0 END)

  - name: negation
    sql: -($0)

  - name: add
    sql: ($0) + ($1)

  - name: subtract
    sql: ($0) - ($1)

  - name: multiply
    sql: $0 * $1

  - name: divide
    sql: $0 / NULLIF($1,0)

  - name: power
    sql: POWER($0, $1)

  - name: mod
    sql: MOD($0, $1)

  - name: round
    sql: ROUND($0)

  - name: round to
    sql: ROUND($0, CAST($1 AS INT))

  - name: ceiling
    sql: CEILING($0)

  - name: floor
    sql: FLOOR($0)

  - name: sign
    sql: SIGN($0)

  - name: truncate
    sql: TRUNC($0, $1)

  # conversion functions
  - name: cast
    sql: CAST($0 AS $1)
  # Descriton: The CAST() function converts a value (of any type) into a specified datatype. The supported datatype are shown below in "column types" section
  # Syntax: CAST($0 AS $1) 
  # $0 - Column to be converted
  # $1 - data type to convert colum to {see "colunm types"}

# mandatory configuration if super class is not defined
column types:
  integer: integer
  float: decimal(38,15)
  string: varchar(255)
  date: date
  timestamp: timestamp
  time: time

# If section "date format codes" is not defined, then this section must exist
date and time sql tokens:
  YY: yy
  YYYY: yyyy
  MM: MM
  DD: dd
  hh: hh
  hh24: HH
  mi: mi
  ss: ss
  ms: ms
  mon: mon
  ampm: am

date format codes:
  # US
  "mm/dd/yy": mm/dd/yy
  "mm/dd/yyyy": mm/dd/yyyy
  # ANSI
  "yy.mm.dd": yy.mm.dd
  "yyyy.mm.dd": yyyy.mm.dd
  # British/French
  "dd/mm/yy": dd/mm/yy
  "dd/mm/yyyy": dd/mm/yyyy
  # German
  "dd.mm.yy": dd.mm.yy
  "dd.mm.yyyy": dd.mm.yyyy
  # Italian
  "dd-mm-yy": dd-mm-yy
  "dd-mm-yyyy": dd-mm-yyyy
  # Japan
  "yy/mm/dd": yy/mm/dd
  "yyyy/mm/dd": yyyy/mm/dd
  # ISO
  "yymmdd": yymmdd
  "yyyymmdd": yyyymmdd
  # month name
  "dd mon yy": dd mon yy
  "dd mon yyyy": dd mon yyyy
  "Mon dd, yy": mon dd, yy
  "Mon dd, yyyy": mon dd, yyyy

sql error states:
  invalid datetime format: 22007
  datetime overflow: 22008
  query cancelled: 57014
  connection failed: 08001
  cannot connect now: 57P03
