# Copyright 2022 Esri
#
# Licensed under the Apache License Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# 
# id of the connector type (mandatory)                                 
id: sample.redshift

super class: esri.base

identifier setting:
  escape character: '\'
  characters to escape: \'
  open enquote: '"'
  close enquote: '"'
  maximum identifier length: 127

# mandatory configuration if super class is not defined
sql clauses:
  select constant: SELECT ${columns}
  limit: SELECT * FROM (${source}) t LIMIT ${limit}
  pagination: SELECT * FROM (${source}) t ORDER BY ${orderby} LIMIT ${limit} OFFSET ${offset}

  find geometry type: > # When dimension is 0, check if it is multipoint
    SELECT case when t.s = 'ST_Point' then 0
                when t.s = 'ST_MultiPoint' then 3
                when t.s = 'ST_LineString' then 1
                when t.s = 'ST_Polygon' then 2
                when t.s = 'ST_MultiPolygon' then 2
           END
    FROM (
      SELECT ST_GeometryType(${shape}) s
      FROM ${source}
      WHERE ${shape} IS NOT NULL
      LIMIT 1
    ) t
    
  find extent: >
    SELECT MAX("xmax") AS "xmax", MIN("xmin") AS "xmin", MAX("ymax") AS "ymax", MIN("ymin") AS "ymin"
                                                                                                       
    FROM (
      SELECT ST_XMAX(${shape}) AS "xmax", ST_XMIN(${shape}) AS "xmin", ST_YMAX(${shape}) AS "ymax", ST_YMIN(${shape}) AS "ymin"
      FROM (${source}) t
    ) s
    
# Default value for each capability is false
sql capabilities:
  window functions: true
  window function in where clause: false
  common table expression: true
  named parameters in common table expression: true
  floating point numbers in partition by: true

  support primary key constraint: false                         
  spatial support: true
  write back: true                  
  requires schema in sql: true
  support alphanumeric indexes: false
  support spatial indexes: false

window functions:
  - name: row number
    sql: ROW_NUMBER() OVER(ORDER BY $0)

  - name: partitioned row number
    sql: ROW_NUMBER() OVER(PARTITION BY $0 ORDER BY $1)

  - name: average over
    sql: AVG($0) OVER()

  - name: partitioned average over
    sql: AVG($0) OVER(PARTITION BY $1)

  - name: count over
    sql: COUNT($0) OVER()

  - name: sliding average
    sql: AVG($0) OVER(ORDER BY $1 ROWS BETWEEN $2 PRECEDING AND $3 following)

  - name: partitioned sliding average
    sql: AVG($0) OVER(PARTITION BY $1 ORDER BY $2 ROWS BETWEEN $3 PRECEDING AND $4 following)

  - name: partitioned sum over
    sql: SUM($0) OVER(PARTITION BY $1)

  - name: sum over
    sql: SUM($0) OVER()

  - name: lag over
    sql: LAG($0) OVER(ORDER BY $1)

sql functions:
  # aggregate functions group
  - name: count
    sql: COUNT($0)

  - name: count distinct
    sql: COUNT(DISTINCT $0)

  - name: sum
    sql: SUM($0)

  - name: avg
    sql: AVG($0::float)

  - name: max
    sql: MAX($0)

  - name: min
    sql: MIN($0)

  - name: stddev
    sql: STDDEV($0)

  - name: variance
    sql: VARIANCE($0)

  - name: median
    sql: MEDIAN($0)

  - name: mode
    sql: # Redshift doesn't have MODE function

  - name: percentile
    sql: PERCENTILE_CONT($0) WITHIN GROUP (ORDER BY $1)

  # string functions group
  - name: trim
    sql: TRIM(BOTH $0 FROM $1)

  - name: left trim
    sql: TRIM(LEADING $0 FROM $1)

  - name: right trim
    sql: TRIM(TRAILING $0 FROM $1)

  - name: lower
    sql: LOWER($0)

  - name: upper
    sql: UPPER($0)

  - name: string concatenation
    sql: CONCAT($0, $1)

  - name: string position
    sql: >
      CASE WHEN strpos($1, $0) = 0 THEN NULL ELSE
        strpos($1, $0)
      END

  - name: string position starting with initial position
    sql: >
      CASE WHEN strpos(SUBSTRING($1 FROM ($2)::int), $0) = 0 THEN NULL ELSE
        strpos(SUBSTRING($1 FROM ($2)::int), $0) + ($2::int - 1)
      END

  - name: string length
    sql: LENGTH($0)

  - name: string substitute
    sql: REPLACE($0, $1, $2)

  - name: substring
    sql: SUBSTRING($0, $1, $2)

  - name: left
    sql: LEFT($0, $1)

  - name: right
    sql: RIGHT($0, $1)

  - name: like
    sql: $0 LIKE $1

  - name: regexp replace
    sql: regexp_replace($0, $1, $2)

  - name: regexp like
    sql: $0 ~ $1

  # date time functions group
  - name: extract year
    sql: EXTRACT(year FROM $0)

  - name: extract quarter
    sql: EXTRACT(quarter FROM $0)

  - name: extract month
    sql: EXTRACT(month FROM $0)

  - name: extract day of month
    sql: EXTRACT(day FROM $0)

  - name: extract day of week
    sql: EXTRACT(dayofweek FROM $0)

  - name: extract hour
    sql: EXTRACT(hour FROM $0)

  - name: extract minute
    sql: EXTRACT(minute FROM $0)

  - name: extract second
    sql: EXTRACT(second FROM $0)

  - name: datedif year
    sql: round((date_part('epoch',($1)::date) - date_part('epoch', ($0)::date))::numeric/60/60/24/365)
#DATEDIFF(year, $0, $1)
# Description: DATEDIFF() function returns the difference between two date time fields in years.

  - name: datedif month
    sql: MONTHS_BETWEEN ($1,$0)
#(DATE_PART('year', $1) - DATE_PART('year', $0)) * 12 + (DATE_PART('month', $1) - DATE_PART('month', $0))
#DATEDIFF(month, $0, $1)
#MONTHS_BETWEEN ( $1, $0 )
# Description: DATEDIFF() function returns the difference between two date time fields in months.

  - name: datedif day
    sql: trunc((date_part(epoch, $1) - date_part(epoch, $0))::numeric/60/60/24)
#DATEDIFF(day, $0, $1)
# Description: DATEDIFF() function returns the difference between two date time fields in days.

  - name: datedif hour
    sql: trunc((date_part(epoch, $1) - date_part(epoch, $0))::numeric/60/60)
#(DATE_PART('day', $1 - $0) * 24 ) + DATE_PART('hour', $1 - $0 )
#DATEDIFF(hour, $0, $1)
# Description: DATEDIFF() function returns the difference between two date time fields in hours.

  - name: datedif minute
    sql: trunc((date_part(epoch, $1) - date_part(epoch, $0))::numeric/60)
#(DATE_PART('day', $1 - $0::) * 24 + DATE_PART('hour', $1 - $0)) * 60 + DATE_PART('minute', $1 - $0)
#DATEDIFF(minute, $0, $1)
# Description: DATEDIFF() function returns the difference between two date time fields in minutes.

  - name: datedif second
    sql: (trunc(date_part(epoch, $1) - date_part(epoch, $0))::NUMERIC)
#((date_part('epoch', '1970-1-1'::date + $1) - date_part('epoch', '1970-1-1'::date + $0))::NUMERIC)
#DATEDIFF(second, $0, $1)
# Description: DATEDIFF() function returns the difference between two date time fields in seconds.
  - name: timedif hour
    sql: EXTRACT(HOUR FROM $0) - EXTRACT(HOUR FROM $1)
#DATEDIFF(hour, $0, $1)
#DATE_PART(hour, $1::time - $0::time)
# Description: DATEDIFF() function returns the difference between two date time fields in hours.

  - name: timedif minute
    sql: (EXTRACT(HOUR FROM $0) - EXTRACT(HOUR FROM $1)) * 60 + EXTRACT(MINUTE FROM $0) - EXTRACT(MINUTE FROM $1)
#DATEDIFF(minute, $0, $1)
#DATE_PART(hour, $1::time - $0::time) * 60 + DATE_PART(minute, $1::time - $0::time)
# Description: DATEDIFF() function returns the difference between two date time fields in minutes.

  - name: timedif second
    sql:  ((EXTRACT(HOUR FROM $0) - EXTRACT(HOUR FROM $1)) * 60 + EXTRACT(MINUTE FROM $0) - EXTRACT(MINUTE FROM $1)) * 60 + EXTRACT(SECOND FROM $0) - EXTRACT(SECOND FROM $1)
#DATEDIFF(second, $0, $1)
# Description: DATEDIFF() function returns the difference between two date time fields in seconds.
# (DATE_PART(hour, $1::time - $0::time) * 60 + DATE_PART(minute, $1::time - $0::time)) * 60 + DATE_PART(second, $1::time - $0::time)
#((EXTRACT(HOUR FROM $0) - EXTRACT(HOUR FROM $1)) * 360 + (EXTRACT(MINUTE FROM $0) - EXTRACT(MINUTE FROM $1)) * 60 + EXTRACT(SECOND FROM $0) - EXTRACT(SECOND FROM $1)) AS "result"
#((EXTRACT(HOUR FROM $0) - EXTRACT(HOUR FROM $1)) * 60 + EXTRACT(MINUTE FROM $0) - EXTRACT(MINUTE FROM $1)) * 60 + EXTRACT(SECOND FROM $0) - EXTRACT(SECOND FROM $1)                                                                                                  
  - name: dateadd year
    sql: DATEADD(month, $1::int * 12, $0)

  - name: dateadd month
    sql: DATEADD(month, $1::int, $0)

  - name: dateadd day
    sql: DATEADD(day, $1::int, $0)

  - name: dateadd hour
    sql: DATEADD(hour, $1::int, $0)

  - name: dateadd minute
    sql: DATEADD(minute, $1::int, $0)

  - name: dateadd second
    sql: DATEADD(second, $1::int, $0)

  - name: timeonlyadd hour
    sql: DATEADD(hour, $1::int, $0)

  - name: timeonlyadd minute
    sql: DATEADD(minute, $1:int, $0)

  - name: timeonlyadd second
    sql: DATEADD(second, $1::int, $0)

  - name: create timestamp from milliseconds
    sql: TIMESTAMP 'epoch' + $0 * interval '0.001 second'

  - name: create timestamp from components
    sql: >
      CASE WHEN $1 > 12 OR $1 < 1 OR $2 > 31 OR $2 < 1 OR
        $3 > 24 OR $3 < 0 OR $4 > 60 OR $4 < 0 OR $5 > 60 OR $5 < 0 THEN NULL ELSE
        TO_TIMESTAMP($0 || '-' || $1 || '-' || $2 || ' ' || RIGHT('0'||$3,2) || ':' || $4 || ':' || $5,
              CASE WHEN length($0) > 2 THEN 'YYYY-MM-DD hh24:mi:ss' ELSE 'YY-MM-DD hh24:mi:ss' END)::timestamp without time zone
      END
      
  - name: create timestamp from text
    sql: (TO_TIMESTAMP($0, '$1')::timestamp without time zone)

  - name: create time from milliseconds
    sql: CAST ((timestamp 'epoch' + $0 * interval '0.001 second') AS TIME)

  - name: create time from components
    sql: >
      CASE WHEN $0 > 24 OR $0 < 0 OR $1 > 60 OR $1 < 0 OR $2 > 60 OR $2 < 0 THEN NULL ELSE
      ( $0 || ':' || $1 || ':' || $2)::time END
      
  - name: time from hours minutes seconds
    sql: >
      CASE WHEN $0 > 24 OR $0 < 0 OR $1 > 60 OR $1 < 0 OR $2 > 60 OR $2 < 0 THEN NULL ELSE
      ($0 || ':' || $1 || ':' || $2)::time END

  - name: create date from milliseconds
    sql: CAST ((timestamp 'epoch' + $0/1000 * interval '1 second') AS DATE)

  - name: create date from components
    sql: >
      CASE WHEN $1 > 12 OR $1 < 1 OR $2 > 31 OR $2 < 1 THEN NULL ELSE
      CASE WHEN length($0) > 2 THEN TO_DATE($0 || '-' || $1 || '-' ||$2,'YYYY-MM-DD') ELSE
      TO_DATE($0 || '-' || $1 || '-' ||$2,'YY-MM-DD') END END

  - name: current timestamp
    sql: dateadd(day,0,'now')

  - name: current time
    sql: dateadd(day,0,time 'now')

  - name: current date
    sql: CURRENT_DATE

  - name: now
    sql: dateadd(day,0,'now')

  # conditional functions group
  - name: case when else
    sql: CASE WHEN $0 THEN $1 ELSE $2 END

  - name: case when
    sql: CASE WHEN $0 THEN $1 END

  - name: is null
    sql: $0 IS NULL

  - name: is not null
    sql: $0 IS NOT NULL

  - name: nullif
    sql: nullif($0, $1)

  - name: ifnull
    sql: COALESCE($0, $1)

  - name: coalesce
    sql: COALESCE($0, $1)

  # logical operators
  - name: and
    sql: $0 AND $1

  - name: or
    sql: $0 OR $1

  - name: between
    sql: $0 BETWEEN $1 AND $2

  - name: not
    sql: NOT($0)

  # arithmetic functions group
  - name: abs
    sql: ABS($0)

  - name: acos
    sql: ACOS($0)

  - name: asin
    sql: ASIN($0)

  - name: atan
    sql: ATAN($0)

  - name: sin
    sql: SIN($0)

#  - name: sinh
#    sql: SINH($0)

  - name: cos
    sql: COS($0)

#  - name: cosh
#    sql: COSH($0)

  - name: tan
    sql: TAN($0)

#  - name: tanh
#    sql: TANH($0)

  - name: ln
    sql: LN(NULLIF(CASE WHEN $0 <= 0 THEN NULL ELSE $0::FLOAT END ,0))

  - name: log
    sql: (CASE WHEN $1 <=0 THEN NULL ELSE LN(NULLIF(CASE WHEN $0 <= 0 THEN NULL ELSE $0::FLOAT END ,0)) / LN(NULLIF($1::FLOAT, 10)) END)
    
  - name: log10
    sql: LOG(CASE WHEN $0 <= 0 THEN NULL ELSE $0::FLOAT END)

  - name: negation
    sql: -($0)

  - name: add
    sql: ($0::double precision) + ($1)

  - name: subtract
    sql: ($0::double precision) - ($1)

  - name: multiply
    sql: $0::double precision * $1

  - name: divide
    sql: $0::double precision / NULLIF($1,0)

  - name: power
    sql: POWER($0, CASE WHEN $0 < 0 AND CEIL(ABS(MOD($1::double precision, 1))) != 0 THEN NULL ELSE $1 END)

  - name: mod
    sql: MOD($0, $1)

  - name: round
    sql: ROUND($0::double precision)

  - name: round to
    sql: ROUND($0::double precision, CAST($1 AS INT))

  - name: ceiling
    sql: CEILING($0)

  - name: floor
    sql: FLOOR($0)

  - name: sign
    sql: SIGN($0)

  - name: truncate
    sql: TRUNC($0, $1)

  # conversion functions
  - name: cast
    sql: CAST($0 AS $1)

  # spatial functions
  - name: st_geometryFromText
    sql: ST_GeomFromText($0, $1)

  - name: st_asbinary
    sql: ST_AsBinary($0)    
    geometry output type: hex                                

  - name: st_intersects
    sql: ST_Intersects($0, $1)

  - name: st_transform
    sql: # not supported                                        

  - name: st_centroid
    sql: # not supported

  - name: st_within
    sql: ST_Within($0, $1)

  - name: st_distance_sphere
    sql: ST_DistanceSphere($0::geometry, $1::geometry)
    
  - name: linestring
    sql: ST_SetSrid(ST_MakeLine($0, $1), $2)

  - name: make_point
    sql: ST_SetSRID(ST_Point($0, $1), $2)

  - name: make_geography_point
    sql: ST_Point($0, $1)::geography

  - name: geodesic length
    sql: # Redshift doesn't support geodesic area. The ST_Area in Redshift can't specify the unit. The area units are the same as the units in which the coordinates of the input geometry are expressed. 

  - name: geodesic area
    sql: # Redshift doesn't support geodesic area. The ST_Length in Redshift can't specify the unit. The length units are the same as the units in which the coordinates of the input geometry are expressed. 

  - name: st_x
    sql: ST_X($0)

  - name: st_y
    sql: ST_Y($0)
    
supported data types:
  - BIGINT
  - CHAR
  - CHARACTER
  - CHARACTER VARYING
  - DATE
  - DECIMAL
  - DOUBLE
  - DOUBLE PRECISION
  - FLOAT
  - FLOAT4
  - FLOAT8
  - INT
  - INT2
  - INT4
  - INT8
  - INTEGER
  - NCHAR
  - NVARCHAR
  - BPCHAR
  - NUMERIC
  - REAL
  - SMALLINT
  - TEXT
  - TIME
  - TIME WITHOUT TIME ZONE
  - TIMESTAMP
  - TIMESTAMP WITHOUT TIME ZONE
  - VARCHAR
  - GEOMETRY

map to field types:
  GEOMETRY: geometry
  TIME: time
  
column types:
  integer: int
  float: float
  fixed: numeric(38, 15)     
  string: varchar(65535)
  date: date
  timestamp: timestamp without time zone
  time: time
  geometry: geometry

sql placeholders:
  geometry: ST_GeomFromWKB(TO_HEX(?::varbyte))                                                                                                                      

date and time sql tokens:
  YY: YY
  YYYY: YYYY
  MM: MM
  DD: DD
  hh: HH
  HH: HH24
  mm: MI
  ss: SS
  ms: MS
  mon: mon
  ampm: AM
                                                                                                                    
date format codes:
  # US
  "mm/dd/yy": mm/dd/yy
  "mm/dd/yyyy": mm/dd/yyyy
  # ANSI
  "yy.mm.dd": yy.mm.dd
  "yyyy.mm.dd": yyyy.mm.dd
  # British/French
  "dd/mm/yy": dd/mm/yy
  "dd/mm/yyyy": dd/mm/yyyy
  # German
  "dd.mm.yy": dd.mm.yy
  "dd.mm.yyyy": dd.mm.yyyy
  # Italian
  "dd-mm-yy": dd-mm-yy
  "dd-mm-yyyy": dd-mm-yyyy
  # Japan
  "yy/mm/dd": yy/mm/dd
  "yyyy/mm/dd": yyyy/mm/dd
  # ISO
  "yymmdd": yymmdd
  "yyyymmdd": yyyymmdd
  # month name
  "dd mon yy": dd mon yy
  "dd mon yyyy": dd mon yyyy
  "Mon dd, yy": mon dd, yy
  "Mon dd, yyyy": mon dd, yyyy

sql error states:
  invalid datetime format: 1205
  datetime overflow: 1207
  query cancelled: 57014
  connection failed: 500150
  cannot connect now: 500150